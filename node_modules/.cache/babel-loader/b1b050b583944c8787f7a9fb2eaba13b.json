{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js\";\nimport React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nvar keys = require('../../config/keys');\n\nvar YouTubeAuth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeAuth, _Component);\n\n  function YouTubeAuth(props) {\n    var _this;\n\n    _classCallCheck(this, YouTubeAuth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(YouTubeAuth).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.checkCredentials();\n    };\n\n    _this.checkCredentials =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(keys.STRAPI_URI + '/users/me', {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              json = _context.sent;\n\n              _this.isTokenValid(json);\n\n              _this.setYouTubeAccountId(json);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.isTokenValid = function (response) {// if (response.youtubeaccount == null) {\n      //   this.setState({ authorised: false })\n      // } else {\n      //   if (response.youtubeaccount.tokenObj.access_token != null) {\n      //     this.setState({ authorised: true })\n      //   }\n      //   if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n      //     this.setState({ authorised: false })\n      //     alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n      //   }\n      // }\n    };\n\n    _this.setYouTubeAccountId = function (response) {\n      if (response.youtubeaccount != null) {\n        _this.setState({\n          youtubeaccountId: response.youtubeaccount._id\n        });\n      }\n    };\n\n    _this.logout = function () {\n      // Retrieve credentials from database\n      fetch(keys.STRAPI_URI + '/youtubeaccounts/' + _this.state.youtubeaccountId, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + _this.props.user.jwt\n        }\n      });\n\n      _this.setState({\n        //authorised: false,\n        youtubeaccountId: undefined\n      });\n    };\n\n    _this.onFailure = function (error) {\n      console.log(error);\n    };\n\n    _this.googleResponse =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(response) {\n        var channelName, profileObj, tokenObj, user;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                channelName = response.profileObj.name;\n                profileObj = response.profileObj;\n                tokenObj = response.tokenObj;\n                user = _this.props.user.userID; // Store retrieved credentials in database\n\n                _context2.next = 6;\n                return fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                  },\n                  body: JSON.stringify({\n                    \"channelName\": channelName,\n                    \"profileObj\": profileObj,\n                    \"tokenObj\": tokenObj,\n                    \"user\": user\n                  })\n                });\n\n              case 6:\n                _this.checkCredentials();\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      youtubeaccountId: undefined\n    };\n    return _this;\n  }\n\n  _createClass(YouTubeAuth, [{\n    key: \"render\",\n    value: function render() {\n      // switch (this.state.authorised) {\n      // case false:\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(GoogleLogin, {\n        clientId: keys.GOOGLE_CLIENT_ID,\n        scope: keys.YOUTUBE_ANALYTICS_SCOPE,\n        buttonText: \"Login\",\n        responseType: \"id_token\",\n        prompt: \"consent\",\n        accessType: \"offline\",\n        onSuccess: this.googleResponse,\n        onFailure: this.onFailure,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })); // default:\n      //   return(\n      //     <div>\n      //     <button onClick={this.logout}>Logout</button>\n      //     </div>\n      //   )\n      // }\n    }\n  }]);\n\n  return YouTubeAuth;\n}(Component);\n\nexport default YouTubeAuth;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js"],"names":["React","Component","GoogleLogin","keys","require","YouTubeAuth","props","componentDidMount","checkCredentials","fetch","STRAPI_URI","method","headers","user","jwt","response","json","isTokenValid","setYouTubeAccountId","youtubeaccount","setState","youtubeaccountId","_id","logout","state","undefined","onFailure","error","console","log","googleResponse","channelName","profileObj","name","tokenObj","userID","body","JSON","stringify","GOOGLE_CLIENT_ID","YOUTUBE_ANALYTICS_SCOPE"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nconst keys = require('../../config/keys');\n\nclass YouTubeAuth extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      youtubeaccountId: undefined\n    }\n  }\n\n  componentDidMount = () => {\n    this.checkCredentials();\n  }\n\n  checkCredentials = async() => {\n    // Retrieve credentials from database\n    const response = await fetch(keys.STRAPI_URI + '/users/me', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    const json = await response.json();\n    this.isTokenValid(json)\n    this.setYouTubeAccountId(json)\n  }\n\n  isTokenValid = (response) => {\n    // if (response.youtubeaccount == null) {\n    //   this.setState({ authorised: false })\n    // } else {\n    //   if (response.youtubeaccount.tokenObj.access_token != null) {\n    //     this.setState({ authorised: true })\n    //   }\n    //   if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n    //     this.setState({ authorised: false })\n    //     alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n    //   }\n    // }\n  }\n\n  setYouTubeAccountId = (response) => {\n    if (response.youtubeaccount != null) {\n      this.setState({ youtubeaccountId: response.youtubeaccount._id })\n    }\n  }\n\n  logout = () => {\n    // Retrieve credentials from database\n    fetch(keys.STRAPI_URI + '/youtubeaccounts/' + this.state.youtubeaccountId, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    this.setState({\n      //authorised: false,\n      youtubeaccountId: undefined\n     })\n  }\n\n  onFailure = (error) => {\n    console.log(error);\n  };\n\n  googleResponse = async(response) => {\n\n    let channelName = response.profileObj.name;\n    let profileObj = response.profileObj;\n    let tokenObj = response.tokenObj;\n    let user = this.props.user.userID;\n\n    // Store retrieved credentials in database\n    await fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n      body: JSON.stringify({\n        \"channelName\": channelName,\n        \"profileObj\": profileObj,\n        \"tokenObj\": tokenObj,\n        \"user\": user\n      })\n    })\n    this.checkCredentials()\n  }\n\n  render() {\n    // switch (this.state.authorised) {\n      // case false:\n        return(\n          <div>\n              <GoogleLogin\n                  clientId={keys.GOOGLE_CLIENT_ID}\n                  scope={keys.YOUTUBE_ANALYTICS_SCOPE}\n                  buttonText=\"Login\"\n                  responseType=\"id_token\"\n                  prompt=\"consent\"\n                  accessType=\"offline\"\n                  onSuccess={this.googleResponse}\n                  onFailure={this.onFailure}\n              />\n          </div>\n        )\n\n      // default:\n      //   return(\n      //     <div>\n      //     <button onClick={this.logout}>Logout</button>\n      //     </div>\n      //   )\n    // }\n  }\n}\n\nexport default YouTubeAuth;\n"]},"metadata":{},"sourceType":"module"}