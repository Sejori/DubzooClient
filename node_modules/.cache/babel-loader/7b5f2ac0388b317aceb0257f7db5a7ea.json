{"ast":null,"code":"import _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js\";\nimport React, { Component } from 'react';\n\nvar keys = require('../../config/keys');\n/*global gapi*/\n\n\nvar GoogleAuth; // Google Auth object.\n\nvar isAuthorized;\nvar currentApiRequest;\n\nvar YouTubeAuth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeAuth, _Component);\n\n  function YouTubeAuth() {\n    var _this;\n\n    _classCallCheck(this, YouTubeAuth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(YouTubeAuth).call(this));\n\n    _this.initClient = function () {\n      gapi.client.init({\n        'apiKey': keys.GOOGLE_API_KEY,\n        'clientId': keys.GOOGLE_CLIENT_ID,\n        'scope': keys.GOOGLE_SCOPES,\n        'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/youtubeAnalytics/v1/rest']\n      }).then(function () {\n        GoogleAuth = gapi.auth2.getAuthInstance(); // Listen for sign-in state changes.\n\n        GoogleAuth.isSignedIn.listen(this.updateSigninStatus);\n      });\n    };\n\n    _this.sendAuthorizedApiRequest = function (requestDetails) {\n      currentApiRequest = requestDetails;\n\n      if (isAuthorized) {\n        // Make API request\n        // gapi.client.request(requestDetails)\n        // Reset currentApiRequest variable.\n        currentApiRequest = {};\n      } else {\n        GoogleAuth.signIn();\n      }\n    };\n\n    _this.updateSigninStatus = function (isSignedIn) {\n      if (isSignedIn) {\n        isAuthorized = true;\n\n        if (currentApiRequest) {\n          _this.sendAuthorizedApiRequest(currentApiRequest);\n        }\n      } else {\n        isAuthorized = false;\n      }\n    };\n\n    _this.state = {\n      credentials: null\n    };\n    return _this;\n  }\n\n  _createClass(YouTubeAuth, [{\n    key: \"render\",\n    // Example 2: Use gapi.client.request(args) function\n\n    /* var request = gapi.client.request({\n      'method': 'GET',\n      'path': '/youtube/analytics/v1/reports',\n      'params': {'ids': 'channel==MINE', 'start-date': '2016-05-01', 'end-date': '2016-06-30', 'metrics': 'views'}\n    });\n    // Execute the API request.\n    request.execute(function(response) {\n      console.log(response);\n    }); */\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"sign-in-or-out-button\",\n        style: \"margin-left: 25px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Sign In/Authorize\"), React.createElement(\"button\", {\n        id: \"revoke-access-button\",\n        style: \"display: none; margin-left: 25px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Revoke access\"), React.createElement(\"div\", {\n        id: \"auth-status\",\n        style: \"display: inline; padding-left: 25px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return YouTubeAuth;\n}(Component);\n\nexport default YouTubeAuth;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js"],"names":["React","Component","keys","require","GoogleAuth","isAuthorized","currentApiRequest","YouTubeAuth","initClient","gapi","client","init","GOOGLE_API_KEY","GOOGLE_CLIENT_ID","GOOGLE_SCOPES","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","sendAuthorizedApiRequest","requestDetails","signIn","state","credentials"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;AAEA;;;AACA,IAAIC,UAAJ,C,CAAgB;;AAChB,IAAIC,YAAJ;AACA,IAAIC,iBAAJ;;IAEMC,W;;;;;AACJ,yBAAc;AAAA;;AAAA;;AACZ;;AADY,UAQdC,UARc,GAQD,YAAM;AACjBC,MAAAA,IAAI,CAACC,MAAL,CAAYC,IAAZ,CAAiB;AACb,kBAAUT,IAAI,CAACU,cADF;AAEb,oBAAYV,IAAI,CAACW,gBAFJ;AAGb,iBAASX,IAAI,CAACY,aAHD;AAIb,yBAAiB,CAAC,uEAAD;AAJJ,OAAjB,EAKGC,IALH,CAKQ,YAAY;AAChBX,QAAAA,UAAU,GAAGK,IAAI,CAACO,KAAL,CAAWC,eAAX,EAAb,CADgB,CAGhB;;AACAb,QAAAA,UAAU,CAACc,UAAX,CAAsBC,MAAtB,CAA6B,KAAKC,kBAAlC;AACH,OAVD;AAWD,KApBa;;AAAA,UA4BdC,wBA5Bc,GA4Ba,UAACC,cAAD,EAAoB;AAC7ChB,MAAAA,iBAAiB,GAAGgB,cAApB;;AACA,UAAIjB,YAAJ,EAAkB;AAChB;AACA;AAEA;AACAC,QAAAA,iBAAiB,GAAG,EAApB;AACD,OAND,MAMO;AACLF,QAAAA,UAAU,CAACmB,MAAX;AACD;AACF,KAvCa;;AAAA,UA8CdH,kBA9Cc,GA8CO,UAACF,UAAD,EAAgB;AACnC,UAAIA,UAAJ,EAAgB;AACdb,QAAAA,YAAY,GAAG,IAAf;;AACA,YAAIC,iBAAJ,EAAuB;AACrB,gBAAKe,wBAAL,CAA8Bf,iBAA9B;AACD;AACF,OALD,MAKO;AACLD,QAAAA,YAAY,GAAG,KAAf;AACD;AACF,KAvDa;;AAGZ,UAAKmB,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAHY;AAMb;;;;AAmDD;;AACA;;;;;;;;;6BAUS;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,EAAE,EAAC,uBAAX;AACQ,QAAA,KAAK,EAAC,mBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAGE;AAAQ,QAAA,EAAE,EAAC,sBAAX;AACQ,QAAA,KAAK,EAAC,kCADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHF,EAME;AAAK,QAAA,EAAE,EAAC,aAAR;AAAsB,QAAA,KAAK,EAAC,qCAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF;AAUD;;;;EAhFqBxB,S;;AAmF1B,eAAeM,WAAf","sourcesContent":["import React, { Component } from 'react';\n\nconst keys = require('../../config/keys')\n\n/*global gapi*/\nvar GoogleAuth; // Google Auth object.\nvar isAuthorized;\nvar currentApiRequest;\n\nclass YouTubeAuth extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      credentials: null,\n    }\n  }\n\n  initClient = () => {\n    gapi.client.init({\n        'apiKey': keys.GOOGLE_API_KEY,\n        'clientId': keys.GOOGLE_CLIENT_ID,\n        'scope': keys.GOOGLE_SCOPES,\n        'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/youtubeAnalytics/v1/rest']\n    }).then(function () {\n        GoogleAuth = gapi.auth2.getAuthInstance();\n\n        // Listen for sign-in state changes.\n        GoogleAuth.isSignedIn.listen(this.updateSigninStatus);\n    });\n  }\n\n  /**\n   * Store the request details. Then check to determine whether the user\n   * has authorized the application.\n   *   - If the user has granted access, make the API request.\n   *   - If the user has not granted access, initiate the sign-in flow.\n   */\n  sendAuthorizedApiRequest = (requestDetails) => {\n    currentApiRequest = requestDetails;\n    if (isAuthorized) {\n      // Make API request\n      // gapi.client.request(requestDetails)\n\n      // Reset currentApiRequest variable.\n      currentApiRequest = {};\n    } else {\n      GoogleAuth.signIn();\n    }\n  }\n\n  /**\n   * Listener called when user completes auth flow. If the currentApiRequest\n   * variable is set, then the user was prompted to authorize the application\n   * before the request executed. In that case, proceed with that API request.\n   */\n  updateSigninStatus = (isSignedIn) => {\n    if (isSignedIn) {\n      isAuthorized = true;\n      if (currentApiRequest) {\n        this.sendAuthorizedApiRequest(currentApiRequest);\n      }\n    } else {\n      isAuthorized = false;\n    }\n  }\n\n  // Example 2: Use gapi.client.request(args) function\n  /* var request = gapi.client.request({\n    'method': 'GET',\n    'path': '/youtube/analytics/v1/reports',\n    'params': {'ids': 'channel==MINE', 'start-date': '2016-05-01', 'end-date': '2016-06-30', 'metrics': 'views'}\n  });\n  // Execute the API request.\n  request.execute(function(response) {\n    console.log(response);\n  }); */\n\n  render() {\n      return (\n        <div>\n          <button id=\"sign-in-or-out-button\"\n                  style=\"margin-left: 25px\">Sign In/Authorize</button>\n          <button id=\"revoke-access-button\"\n                  style=\"display: none; margin-left: 25px\">Revoke access</button>\n\n          <div id=\"auth-status\" style=\"display: inline; padding-left: 25px\"></div>\n        </div>\n      );\n    }\n  }\n\nexport default YouTubeAuth;\n"]},"metadata":{},"sourceType":"module"}