{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar keys = require('../../config/keys');\n\nvar Content;\n\nvar YouTubeData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeData, _Component);\n\n  function YouTubeData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, YouTubeData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(YouTubeData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.GetDates = function () {\n      // getting current date\n      var today = new Date();\n      var dd = today.getDate();\n      var mm = today.getMonth() + 1;\n      var yyyy = today.getFullYear();\n      today = mm + '-' + dd + '-' + yyyy;\n      mm = mm - 1;\n      var monthAgo = mm + '-' + dd + '-' + yyyy;\n      return today, monthAgo;\n    };\n\n    _this.FetchData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _headers;\n\n      var appResponse, appJson, accessToken, channelName, youTubeResponse, youTubeJson;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(keys.STRAPI_URI + '/users/me', {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                }\n              });\n\n            case 2:\n              appResponse = _context.sent;\n              _context.next = 5;\n              return appResponse.json();\n\n            case 5:\n              appJson = _context.sent;\n\n              if (appJson.youtubeaccount == null) {\n                alert(\"Something went wrong!\");\n              } else {\n                if (appJson.youtubeaccount.tokenObj.access_token != null) {\n                  accessToken = appJson.youtubeaccount.tokenObj.access_token;\n                  channelName = appJson.youtubeaccount.profileObj.name;\n                }\n\n                if (appJson.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n                  alert(\"Uh-oh. Your access has expired, please sign-in again :)\");\n                }\n              } // Store retrieved credentials in database\n\n\n              _context.next = 9;\n              return fetch(keys.YOUTUBE_ANALYTICS_URI, {\n                method: \"GET\",\n                headers: (_headers = {\n                  \"Content-Type\": \"application/json\",\n                  \"Authorization\": \"Bearer \" + accessToken,\n                  \"ids\": 'channel==' + channelName,\n                  \"accessToken\": accessToken,\n                  \"scope\": keys.YOUTUBE_SCOPES,\n                  \"endDate\": _this.GetDates().today\n                }, _defineProperty(_headers, \"scope\", keys.YOUTUBE_SCOPES), _defineProperty(_headers, \"startDate\", _this.GetDates().monthAgo), _defineProperty(_headers, \"metrics\", 'estimatedMinutesWatched,views,likes,subscribersGained'), _defineProperty(_headers, \"dimensions\", 'hour'), _defineProperty(_headers, \"sort\", 'day'), _headers),\n                body: JSON.stringify({})\n              });\n\n            case 9:\n              youTubeResponse = _context.sent;\n              _context.next = 12;\n              return youTubeResponse.json();\n\n            case 12:\n              youTubeJson = _context.sent;\n              console.log(youTubeJson); // // GET YT Analytics API\n              // axios\n              //   .get(keys.YOUTUBE_ANALYTICS_URI, {\n              //     access_token: accessToken,\n              //     endDate: today,\n              //     ids: channelName,\n              //     scope: keys.YOUTUBE_SCOPES,\n              //     startDate: monthAgo,\n              //     metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n              //     dimensions: 'hour',\n              //     sort: 'day'\n              //   })\n              //   .then(response => {\n              //     // Handle success.\n              //     console.log('Well done!');\n              //     console.log(response);\n              //   })\n              //   .catch(error => {\n              //     // Handle error.\n              //     console.log('An error occurred:', error);\n              //   });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    return _this;\n  }\n\n  _createClass(YouTubeData, [{\n    key: \"render\",\n    value: function render() {\n      Content = React.createElement(\"button\", {\n        onClick: this.FetchData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Fetch Data\");\n      return React.createElement(\"div\", {\n        className: \"Data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, Content);\n    }\n  }]);\n\n  return YouTubeData;\n}(Component);\n\nexport default YouTubeData;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js"],"names":["React","Component","axios","keys","require","Content","YouTubeData","GetDates","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","monthAgo","FetchData","fetch","STRAPI_URI","method","headers","props","user","jwt","appResponse","json","appJson","youtubeaccount","alert","tokenObj","access_token","accessToken","channelName","profileObj","name","expires_at","getTime","YOUTUBE_ANALYTICS_URI","YOUTUBE_SCOPES","body","JSON","stringify","youTubeResponse","youTubeJson","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst keys = require('../../config/keys');\nvar Content;\n\nclass YouTubeData extends Component {\n\n  GetDates = () => {\n    // getting current date\n    var today = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth()+1;\n    let yyyy = today.getFullYear();\n    today = mm+'-'+dd+'-'+yyyy;\n\n    mm = mm - 1;\n    var monthAgo = mm+'-'+dd+'-'+yyyy;\n\n    return(today, monthAgo);\n  }\n\n  FetchData = async() => {\n\n    // get YT credentials from db\n    const appResponse = await fetch(keys.STRAPI_URI + '/users/me', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    const appJson = await appResponse.json();\n\n    if (appJson.youtubeaccount == null) {\n      alert(\"Something went wrong!\")\n    } else {\n      if (appJson.youtubeaccount.tokenObj.access_token != null) {\n        var accessToken = appJson.youtubeaccount.tokenObj.access_token;\n        var channelName = appJson.youtubeaccount.profileObj.name;\n      }\n      if (appJson.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n        alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n      }\n    }\n\n    // Store retrieved credentials in database\n    const youTubeResponse = await fetch(keys.YOUTUBE_ANALYTICS_URI, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + accessToken,\n        \"ids\": 'channel==' + channelName,\n        \"accessToken\": accessToken,\n        \"scope\": keys.YOUTUBE_SCOPES,\n        \"endDate\": this.GetDates().today,\n        \"scope\": keys.YOUTUBE_SCOPES,\n        \"startDate\": this.GetDates().monthAgo,\n        \"metrics\": 'estimatedMinutesWatched,views,likes,subscribersGained',\n        \"dimensions\": 'hour',\n        \"sort\": 'day'\n      },\n      body: JSON.stringify({\n\n      })\n    })\n    const youTubeJson = await youTubeResponse.json();\n    console.log(youTubeJson);\n\n    // // GET YT Analytics API\n    // axios\n    //   .get(keys.YOUTUBE_ANALYTICS_URI, {\n    //     access_token: accessToken,\n    //     endDate: today,\n    //     ids: channelName,\n    //     scope: keys.YOUTUBE_SCOPES,\n    //     startDate: monthAgo,\n    //     metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n    //     dimensions: 'hour',\n    //     sort: 'day'\n    //   })\n    //   .then(response => {\n    //     // Handle success.\n    //     console.log('Well done!');\n    //     console.log(response);\n    //   })\n    //   .catch(error => {\n    //     // Handle error.\n    //     console.log('An error occurred:', error);\n    //   });\n\n  }\n\n  render() {\n\n    Content = <button onClick={this.FetchData}>Fetch Data</button>\n\n    return(\n      <div className=\"Data\">\n        {Content}\n      </div>\n    );\n  }\n}\n\nexport default YouTubeData;\n"]},"metadata":{},"sourceType":"module"}