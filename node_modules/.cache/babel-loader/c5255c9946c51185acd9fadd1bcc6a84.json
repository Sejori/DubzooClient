{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar keys = require('../../config/keys');\n\nvar Content;\n\nvar YouTubeData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeData, _Component);\n\n  function YouTubeData(props) {\n    var _this;\n\n    _classCallCheck(this, YouTubeData);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(YouTubeData).call(this, props));\n    _this.CheckCredentials =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(keys.STRAPI_URI + '/users/me', {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              json = _context.sent;\n\n              _this.isTokenValid(json);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.IsTokenValid = function (response) {// if (response.youtubeaccount == null) {\n      //   this.setState({ authorised: false })\n      // } else {\n      //   if (response.youtubeaccount.tokenObj.access_token != null) {\n      //     this.setState({ authorised: true })\n      //   }\n      //   if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n      //     this.setState({ authorised: false })\n      //     alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n      //   }\n      // }\n    };\n\n    _this.FetchData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var today, dd, mm, yyyy, monthAgo;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // getting current date\n              today = new Date();\n              dd = today.getDate();\n              mm = today.getMonth() + 1;\n              yyyy = today.getFullYear();\n              today = mm + '-' + dd + '-' + yyyy;\n              mm = mm - 1;\n              monthAgo = mm + '-' + dd + '-' + yyyy; // GET YT Analytics API\n\n              axios.get(keys.YOUTUBE_ANALYTICS_URI, {\n                access_token: _this.props.user.accessToken,\n                endDate: today,\n                ids: _this.props.channelName,\n                scope: keys.YOUTUBE_SCOPES,\n                startDate: monthAgo,\n                metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n                dimensions: 'hour',\n                sort: 'day'\n              }).then(function (response) {\n                // Handle success.\n                console.log('Well done!');\n                console.log(response);\n              }).catch(function (error) {\n                // Handle error.\n                console.log('An error occurred:', error);\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    return _this;\n  }\n\n  _createClass(YouTubeData, [{\n    key: \"render\",\n    value: function render() {\n      Content = React.createElement(\"button\", {\n        onClick: this.FetchData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Fetch Data\");\n      return React.createElement(\"div\", {\n        className: \"Data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, Content);\n    }\n  }]);\n\n  return YouTubeData;\n}(Component);\n\nexport default YouTubeData;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js"],"names":["React","Component","axios","keys","require","Content","YouTubeData","props","CheckCredentials","fetch","STRAPI_URI","method","headers","user","jwt","response","json","isTokenValid","IsTokenValid","FetchData","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","monthAgo","get","YOUTUBE_ANALYTICS_URI","access_token","accessToken","endDate","ids","channelName","scope","YOUTUBE_SCOPES","startDate","metrics","dimensions","sort","then","console","log","catch","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst keys = require('../../config/keys');\nvar Content;\n\nclass YouTubeData extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n\n  CheckCredentials = async() => {\n    // Retrieve credentials from database\n    const response = await fetch(keys.STRAPI_URI + '/users/me', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    const json = await response.json();\n    this.isTokenValid(json)\n  }\n\n  IsTokenValid = (response) => {\n    // if (response.youtubeaccount == null) {\n    //   this.setState({ authorised: false })\n    // } else {\n    //   if (response.youtubeaccount.tokenObj.access_token != null) {\n    //     this.setState({ authorised: true })\n    //   }\n    //   if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n    //     this.setState({ authorised: false })\n    //     alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n    //   }\n    // }\n  }\n\n  FetchData = async() => {\n\n    // getting current date\n    var today = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth()+1;\n    let yyyy = today.getFullYear();\n    today = mm+'-'+dd+'-'+yyyy;\n\n    mm = mm - 1;\n    var monthAgo = mm+'-'+dd+'-'+yyyy;\n\n    // GET YT Analytics API\n    axios\n      .get(keys.YOUTUBE_ANALYTICS_URI, {\n        access_token: this.props.user.accessToken,\n        endDate: today,\n        ids: this.props.channelName,\n        scope: keys.YOUTUBE_SCOPES,\n        startDate: monthAgo,\n        metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n        dimensions: 'hour',\n        sort: 'day'\n      })\n      .then(response => {\n        // Handle success.\n        console.log('Well done!');\n        console.log(response);\n      })\n      .catch(error => {\n        // Handle error.\n        console.log('An error occurred:', error);\n      });\n\n  }\n\n  render() {\n\n    Content = <button onClick={this.FetchData}>Fetch Data</button>\n\n    return(\n      <div className=\"Data\">\n        {Content}\n      </div>\n    );\n  }\n}\n\nexport default YouTubeData;\n"]},"metadata":{},"sourceType":"module"}