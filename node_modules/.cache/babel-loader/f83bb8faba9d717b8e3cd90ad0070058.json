{"ast":null,"code":"import _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js\";\nimport React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nvar keys = require('../../config/keys');\n\nvar YouTubeAuth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeAuth, _Component);\n\n  function YouTubeAuth(props) {\n    var _this;\n\n    _classCallCheck(this, YouTubeAuth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(YouTubeAuth).call(this, props));\n    _this.state = {\n      authorised: false,\n      youtubeaccountId: undefined\n    };\n    return _this;\n  } // componentDidMount = () => {\n  //   this.checkCredentials();\n  // }\n  //\n  // checkCredentials = async() => {\n  //   // Retrieve credentials from database\n  //   const response = await fetch(keys.STRAPI_URI + '/users/me', {\n  //     method: \"GET\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Authorization\": \"Bearer \" + this.props.user.jwt\n  //     },\n  //   })\n  //   const json = await response.json();\n  //   this.isTokenValid(json)\n  //   this.setYouTubeAccountId(json)\n  // }\n  //\n  // isTokenValid = (response) => {\n  //   if (response.youtubeaccount == null) {\n  //     this.setState({ authorised: false })\n  //   } else {\n  //     if (response.youtubeaccount.tokenObj.access_token != null) {\n  //       this.setState({ authorised: true })\n  //     }\n  //     if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n  //       this.setState({ authorised: false })\n  //       alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n  //     }\n  //   }\n  // }\n  //\n  // setYouTubeAccountId = (response) => {\n  //   if (response.youtubeaccount != null) {\n  //     this.setState({ youtubeaccountId: response.youtubeaccount._id })\n  //   }\n  // }\n  //\n  // logout = () => {\n  //   // Retrieve credentials from database\n  //   fetch(keys.STRAPI_URI + '/youtubeaccounts/' + this.state.youtubeaccountId, {\n  //     method: \"DELETE\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Authorization\": \"Bearer \" + this.props.user.jwt\n  //     },\n  //   })\n  //   this.setState({\n  //     authorised: false,\n  //     youtubeaccountId: undefined\n  //    })\n  // }\n  //\n  // onFailure = (error) => {\n  //   console.log(error);\n  // };\n  //\n  // googleResponse = async(response) => {\n  //\n  //   let channelName = response.profileObj.name;\n  //   let profileObj = response.profileObj;\n  //   let tokenObj = response.tokenObj;\n  //   let user = this.props.user.userID;\n  //\n  //   // Store retrieved credentials in database\n  //   await fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Authorization\": \"Bearer \" + this.props.user.jwt\n  //     },\n  //     body: JSON.stringify({\n  //       \"channelName\": channelName,\n  //       \"profileObj\": profileObj,\n  //       \"tokenObj\": tokenObj,\n  //       \"user\": user\n  //     })\n  //   })\n  //   this.checkCredentials()\n  // }\n\n\n  _createClass(YouTubeAuth, [{\n    key: \"render\",\n    value: function render() {\n      // switch (this.state.authorised) {\n      // case false:\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(GoogleLogin, {\n        clientId: keys.GOOGLE_CLIENT_ID,\n        scope: keys.YOUTUBE_ANALYTICS_SCOPE,\n        buttonText: \"Login\",\n        responseType: \"id_token\",\n        prompt: \"consent\",\n        accessType: \"offline\",\n        onSuccess: this.googleResponse,\n        onFailure: this.onFailure,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })); // default:\n      //   return(\n      //     <div>\n      //     <button onClick={this.logout}>Logout</button>\n      //     </div>\n      //   )\n      // }\n    }\n  }]);\n\n  return YouTubeAuth;\n}(Component);\n\nexport default YouTubeAuth;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js"],"names":["React","Component","GoogleLogin","keys","require","YouTubeAuth","props","state","authorised","youtubeaccountId","undefined","GOOGLE_CLIENT_ID","YOUTUBE_ANALYTICS_SCOPE","googleResponse","onFailure"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;IAEMC,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,KADD;AAEXC,MAAAA,gBAAgB,EAAEC;AAFP,KAAb;AAHiB;AAOlB,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6BAES;AACP;AACE;AACE,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AACI,QAAA,QAAQ,EAAEP,IAAI,CAACQ,gBADnB;AAEI,QAAA,KAAK,EAAER,IAAI,CAACS,uBAFhB;AAGI,QAAA,UAAU,EAAC,OAHf;AAII,QAAA,YAAY,EAAC,UAJjB;AAKI,QAAA,MAAM,EAAC,SALX;AAMI,QAAA,UAAU,EAAC,SANf;AAOI,QAAA,SAAS,EAAE,KAAKC,cAPpB;AAQI,QAAA,SAAS,EAAE,KAAKC,SARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADF,CAHG,CAkBL;AACA;AACA;AACA;AACA;AACA;AACF;AACD;;;;EApHuBb,S;;AAuH1B,eAAeI,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nconst keys = require('../../config/keys');\n\nclass YouTubeAuth extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      authorised: false,\n      youtubeaccountId: undefined\n    }\n  }\n\n  // componentDidMount = () => {\n  //   this.checkCredentials();\n  // }\n  //\n  // checkCredentials = async() => {\n  //   // Retrieve credentials from database\n  //   const response = await fetch(keys.STRAPI_URI + '/users/me', {\n  //     method: \"GET\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Authorization\": \"Bearer \" + this.props.user.jwt\n  //     },\n  //   })\n  //   const json = await response.json();\n  //   this.isTokenValid(json)\n  //   this.setYouTubeAccountId(json)\n  // }\n  //\n  // isTokenValid = (response) => {\n  //   if (response.youtubeaccount == null) {\n  //     this.setState({ authorised: false })\n  //   } else {\n  //     if (response.youtubeaccount.tokenObj.access_token != null) {\n  //       this.setState({ authorised: true })\n  //     }\n  //     if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n  //       this.setState({ authorised: false })\n  //       alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n  //     }\n  //   }\n  // }\n  //\n  // setYouTubeAccountId = (response) => {\n  //   if (response.youtubeaccount != null) {\n  //     this.setState({ youtubeaccountId: response.youtubeaccount._id })\n  //   }\n  // }\n  //\n  // logout = () => {\n  //   // Retrieve credentials from database\n  //   fetch(keys.STRAPI_URI + '/youtubeaccounts/' + this.state.youtubeaccountId, {\n  //     method: \"DELETE\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Authorization\": \"Bearer \" + this.props.user.jwt\n  //     },\n  //   })\n  //   this.setState({\n  //     authorised: false,\n  //     youtubeaccountId: undefined\n  //    })\n  // }\n  //\n  // onFailure = (error) => {\n  //   console.log(error);\n  // };\n  //\n  // googleResponse = async(response) => {\n  //\n  //   let channelName = response.profileObj.name;\n  //   let profileObj = response.profileObj;\n  //   let tokenObj = response.tokenObj;\n  //   let user = this.props.user.userID;\n  //\n  //   // Store retrieved credentials in database\n  //   await fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Authorization\": \"Bearer \" + this.props.user.jwt\n  //     },\n  //     body: JSON.stringify({\n  //       \"channelName\": channelName,\n  //       \"profileObj\": profileObj,\n  //       \"tokenObj\": tokenObj,\n  //       \"user\": user\n  //     })\n  //   })\n  //   this.checkCredentials()\n  // }\n\n  render() {\n    // switch (this.state.authorised) {\n      // case false:\n        return(\n          <div>\n              <GoogleLogin\n                  clientId={keys.GOOGLE_CLIENT_ID}\n                  scope={keys.YOUTUBE_ANALYTICS_SCOPE}\n                  buttonText=\"Login\"\n                  responseType=\"id_token\"\n                  prompt=\"consent\"\n                  accessType=\"offline\"\n                  onSuccess={this.googleResponse}\n                  onFailure={this.onFailure}\n              />\n          </div>\n        )\n\n      // default:\n      //   return(\n      //     <div>\n      //     <button onClick={this.logout}>Logout</button>\n      //     </div>\n      //   )\n    // }\n  }\n}\n\nexport default YouTubeAuth;\n"]},"metadata":{},"sourceType":"module"}