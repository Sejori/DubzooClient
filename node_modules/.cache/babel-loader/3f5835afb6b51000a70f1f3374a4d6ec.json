{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js\";\nimport React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nvar keys = require('../../config/keys');\n\nvar YouTubeAuth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeAuth, _Component);\n\n  function YouTubeAuth(props) {\n    var _this;\n\n    _classCallCheck(this, YouTubeAuth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(YouTubeAuth).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.checkCredentials();\n    };\n\n    _this.componentDidUpdate = function (prevProps) {\n      // Typical usage (don't forget to compare props):\n      if (_this.props.authorised !== prevProps.authorised) {\n        _this.setState({\n          loggedIn: !_this.state.loggedIn\n        });\n      }\n    };\n\n    _this.checkCredentials =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(keys.STRAPI_URI + '/users/me', {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              json = _context.sent;\n\n              _this.isTokenValid(json);\n\n              _this.setYouTubeAccountId(json);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.isTokenValid = function (response) {\n      if (response.youtubeaccount == null) {\n        _this.setState({\n          authorised: false\n        });\n      } else {\n        if (response.youtubeaccount.tokenObj.access_token != null) {\n          _this.setState({\n            authorised: true\n          });\n        }\n\n        if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n          _this.setState({\n            authorised: false\n          });\n\n          alert(\"Uh-oh. Your access has expired, please sign-in again :)\");\n        }\n      }\n    };\n\n    _this.setYouTubeAccountId = function (response) {\n      if (response.youtubeaccount != null) {\n        _this.setState({\n          youtubeaccountId: response.youtubeaccount._id\n        });\n      }\n    };\n\n    _this.logout = function () {\n      // Retrieve credentials from database\n      fetch(keys.STRAPI_URI + '/youtubeaccounts/' + _this.state.youtubeaccountId, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + _this.props.user.jwt\n        }\n      });\n\n      _this.setState({\n        authorised: false,\n        youtubeaccountId: undefined\n      });\n    };\n\n    _this.onFailure = function (error) {\n      console.log(error);\n    };\n\n    _this.googleResponse =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(response) {\n        var channelName, profileObj, tokenObj, user;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                channelName = response.profileObj.name;\n                profileObj = response.profileObj;\n                tokenObj = response.tokenObj;\n                user = _this.props.user.userID; // Store retrieved credentials in database\n\n                _context2.next = 6;\n                return fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                  },\n                  body: JSON.stringify({\n                    \"channelName\": channelName,\n                    \"profileObj\": profileObj,\n                    \"tokenObj\": tokenObj,\n                    \"user\": user\n                  })\n                });\n\n              case 6:\n                _this.checkCredentials();\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      authorised: false,\n      youtubeaccountId: undefined\n    };\n    return _this;\n  }\n\n  _createClass(YouTubeAuth, [{\n    key: \"render\",\n    value: function render() {\n      switch (this.state.authorised) {\n        case false:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          }, React.createElement(GoogleLogin, {\n            clientId: keys.GOOGLE_CLIENT_ID,\n            scope: keys.YOUTUBE_ANALYTICS_SCOPE,\n            buttonText: \"Login\",\n            responseType: \"id_token\",\n            prompt: \"consent\",\n            accessType: \"offline\",\n            onSuccess: this.googleResponse,\n            onFailure: this.onFailure,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }));\n\n        default:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            onClick: this.logout,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }, \"Logout\"));\n      }\n    }\n  }]);\n\n  return YouTubeAuth;\n}(Component);\n\nexport default YouTubeAuth;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js"],"names":["React","Component","GoogleLogin","keys","require","YouTubeAuth","props","componentDidMount","checkCredentials","componentDidUpdate","prevProps","authorised","setState","loggedIn","state","fetch","STRAPI_URI","method","headers","user","jwt","response","json","isTokenValid","setYouTubeAccountId","youtubeaccount","tokenObj","access_token","expires_at","Date","getTime","alert","youtubeaccountId","_id","logout","undefined","onFailure","error","console","log","googleResponse","channelName","profileObj","name","userID","body","JSON","stringify","GOOGLE_CLIENT_ID","YOUTUBE_ANALYTICS_SCOPE"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nconst keys = require('../../config/keys');\n\nclass YouTubeAuth extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      authorised: false,\n      youtubeaccountId: undefined\n    }\n  }\n\n  componentDidMount = () => {\n    this.checkCredentials();\n  }\n\n  componentDidUpdate = (prevProps) => {\n    // Typical usage (don't forget to compare props):\n    if (this.props.authorised !== prevProps.authorised) {\n     this.setState({ loggedIn: !this.state.loggedIn });\n    }\n  }\n\n  checkCredentials = async() => {\n    // Retrieve credentials from database\n    const response = await fetch(keys.STRAPI_URI + '/users/me', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    const json = await response.json();\n    this.isTokenValid(json)\n    this.setYouTubeAccountId(json)\n  }\n\n  isTokenValid = (response) => {\n    if (response.youtubeaccount == null) {\n      this.setState({ authorised: false })\n    } else {\n      if (response.youtubeaccount.tokenObj.access_token != null) {\n        this.setState({ authorised: true })\n      }\n      if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n        this.setState({ authorised: false })\n        alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n      }\n    }\n  }\n\n  setYouTubeAccountId = (response) => {\n    if (response.youtubeaccount != null) {\n      this.setState({ youtubeaccountId: response.youtubeaccount._id })\n    }\n  }\n\n  logout = () => {\n    // Retrieve credentials from database\n    fetch(keys.STRAPI_URI + '/youtubeaccounts/' + this.state.youtubeaccountId, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    this.setState({\n      authorised: false,\n      youtubeaccountId: undefined\n     })\n  }\n\n  onFailure = (error) => {\n    console.log(error);\n  };\n\n  googleResponse = async(response) => {\n\n    let channelName = response.profileObj.name;\n    let profileObj = response.profileObj;\n    let tokenObj = response.tokenObj;\n    let user = this.props.user.userID;\n\n    // Store retrieved credentials in database\n    await fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n      body: JSON.stringify({\n        \"channelName\": channelName,\n        \"profileObj\": profileObj,\n        \"tokenObj\": tokenObj,\n        \"user\": user\n      })\n    })\n    this.checkCredentials()\n  }\n\n  render() {\n    switch (this.state.authorised) {\n      case false:\n        return(\n          <div>\n              <GoogleLogin\n                  clientId={keys.GOOGLE_CLIENT_ID}\n                  scope={keys.YOUTUBE_ANALYTICS_SCOPE}\n                  buttonText=\"Login\"\n                  responseType=\"id_token\"\n                  prompt=\"consent\"\n                  accessType=\"offline\"\n                  onSuccess={this.googleResponse}\n                  onFailure={this.onFailure}\n              />\n          </div>\n        )\n\n      default:\n        return(\n          <div>\n          <button onClick={this.logout}>Logout</button>\n          </div>\n        )\n    }\n  }\n}\n\nexport default YouTubeAuth;\n"]},"metadata":{},"sourceType":"module"}