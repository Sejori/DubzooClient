{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar keys = require('../../config/keys');\n\nvar Content;\n\nvar YouTubeData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeData, _Component);\n\n  function YouTubeData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, YouTubeData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(YouTubeData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.GetDates = function () {\n      // getting current date\n      var today = new Date();\n      var dd = today.getDate();\n      var mm = today.getMonth() + 1;\n      var yyyy = today.getFullYear();\n      today = mm + '-' + dd + '-' + yyyy;\n      mm = mm - 1;\n      var monthAgo = mm + '-' + dd + '-' + yyyy;\n    };\n\n    _this.FetchData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var response, json, accessToken, channelName;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(keys.STRAPI_URI + '/users/me', {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                }\n              });\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return response.json();\n\n            case 5:\n              json = _context2.sent;\n\n              if (json.youtubeaccount == null) {\n                alert(\"Something went wrong!\");\n              } else {\n                if (json.youtubeaccount.tokenObj.access_token != null) {\n                  accessToken = json.youtubeaccount.tokenObj.access_token;\n                  channelName = json.youtubeaccount.profileObj.name;\n                }\n\n                if (json.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n                  alert(\"Uh-oh. Your access has expired, please sign-in again :)\");\n                }\n              }\n\n              googleResponse =\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(response) {\n                  var channelName, profileObj, tokenObj, user;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          channelName = response.profileObj.name;\n                          profileObj = response.profileObj;\n                          tokenObj = response.tokenObj;\n                          user = _this.props.user.userID; // Store retrieved credentials in database\n\n                          _context.next = 6;\n                          return fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n                            method: \"POST\",\n                            headers: {\n                              \"Content-Type\": \"application/json\",\n                              \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                            },\n                            body: JSON.stringify({\n                              \"channelName\": channelName,\n                              \"profileObj\": profileObj,\n                              \"tokenObj\": tokenObj,\n                              \"user\": user\n                            })\n                          });\n\n                        case 6:\n                          _this.checkCredentials();\n\n                        case 7:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, this);\n                }));\n\n                return function googleResponse(_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(); // GET YT Analytics API\n\n\n              axios.get(keys.YOUTUBE_ANALYTICS_URI, {\n                access_token: accessToken,\n                endDate: today,\n                ids: channelName,\n                scope: keys.YOUTUBE_SCOPES,\n                startDate: monthAgo,\n                metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n                dimensions: 'hour',\n                sort: 'day'\n              }).then(function (response) {\n                // Handle success.\n                console.log('Well done!');\n                console.log(response);\n              }).catch(function (error) {\n                // Handle error.\n                console.log('An error occurred:', error);\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    return _this;\n  }\n\n  _createClass(YouTubeData, [{\n    key: \"render\",\n    value: function render() {\n      Content = React.createElement(\"button\", {\n        onClick: this.FetchData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Fetch Data\");\n      return React.createElement(\"div\", {\n        className: \"Data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, Content);\n    }\n  }]);\n\n  return YouTubeData;\n}(Component);\n\nexport default YouTubeData;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js"],"names":["React","Component","axios","keys","require","Content","YouTubeData","GetDates","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","monthAgo","FetchData","fetch","STRAPI_URI","method","headers","props","user","jwt","response","json","youtubeaccount","alert","tokenObj","access_token","accessToken","channelName","profileObj","name","expires_at","getTime","googleResponse","userID","body","JSON","stringify","checkCredentials","get","YOUTUBE_ANALYTICS_URI","endDate","ids","scope","YOUTUBE_SCOPES","startDate","metrics","dimensions","sort","then","console","log","catch","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst keys = require('../../config/keys');\nvar Content;\n\nclass YouTubeData extends Component {\n\n  GetDates = () => {\n    // getting current date\n    var today = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth()+1;\n    let yyyy = today.getFullYear();\n    today = mm+'-'+dd+'-'+yyyy;\n\n    mm = mm - 1;\n    var monthAgo = mm+'-'+dd+'-'+yyyy;\n  }\n\n  FetchData = async() => {\n\n    // get YT credentials from db\n    const response = await fetch(keys.STRAPI_URI + '/users/me', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    const json = await response.json();\n\n    if (json.youtubeaccount == null) {\n      alert(\"Something went wrong!\")\n    } else {\n      if (json.youtubeaccount.tokenObj.access_token != null) {\n        var accessToken = json.youtubeaccount.tokenObj.access_token;\n        var channelName = json.youtubeaccount.profileObj.name;\n      }\n      if (json.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n        alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n      }\n    }\n\n    googleResponse = async(response) => {\n\n      let channelName = response.profileObj.name;\n      let profileObj = response.profileObj;\n      let tokenObj = response.tokenObj;\n      let user = this.props.user.userID;\n\n      // Store retrieved credentials in database\n      await fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + this.props.user.jwt\n        },\n        body: JSON.stringify({\n          \"channelName\": channelName,\n          \"profileObj\": profileObj,\n          \"tokenObj\": tokenObj,\n          \"user\": user\n        })\n      })\n      this.checkCredentials();\n    }\n\n    // GET YT Analytics API\n    axios\n      .get(keys.YOUTUBE_ANALYTICS_URI, {\n        access_token: accessToken,\n        endDate: today,\n        ids: channelName,\n        scope: keys.YOUTUBE_SCOPES,\n        startDate: monthAgo,\n        metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n        dimensions: 'hour',\n        sort: 'day'\n      })\n      .then(response => {\n        // Handle success.\n        console.log('Well done!');\n        console.log(response);\n      })\n      .catch(error => {\n        // Handle error.\n        console.log('An error occurred:', error);\n      });\n\n  }\n\n  render() {\n\n    Content = <button onClick={this.FetchData}>Fetch Data</button>\n\n    return(\n      <div className=\"Data\">\n        {Content}\n      </div>\n    );\n  }\n}\n\nexport default YouTubeData;\n"]},"metadata":{},"sourceType":"module"}