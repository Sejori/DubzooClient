{"ast":null,"code":"// import React, { Component } from 'react';\n// import { GoogleLogin } from 'react-google-login';\n//\n// const keys = require('../../config/keys');\n//\n// class YouTubeAuth extends Component {\n//   constructor(props) {\n//     super(props);\n//\n//     this.state = {\n//       authorised: false,\n//       youtubeaccountId: undefined\n//     }\n//   }\n//\n//   componentDidMount = () => {\n//     this.checkCredentials();\n//   }\n//\n//   checkCredentials = async() => {\n//     // Retrieve credentials from database\n//     const response = await fetch(keys.STRAPI_URI + '/users/me', {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": \"Bearer \" + this.props.user.jwt\n//       },\n//     })\n//     const json = await response.json();\n//     this.isTokenValid(json)\n//     this.setYouTubeAccountId(json)\n//   }\n//\n//   isTokenValid = (response) => {\n//     if (response.youtubeaccount == null) {\n//       this.setState({ authorised: false })\n//     } else {\n//       if (response.youtubeaccount.tokenObj.access_token != null) {\n//         this.setState({ authorised: true })\n//       }\n//       if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n//         this.setState({ authorised: false })\n//         alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n//       }\n//     }\n//   }\n//\n//   setYouTubeAccountId = (response) => {\n//     if (response.youtubeaccount != null) {\n//       this.setState({ youtubeaccountId: response.youtubeaccount._id })\n//     }\n//   }\n//\n//   logout = () => {\n//     // Retrieve credentials from database\n//     fetch(keys.STRAPI_URI + '/youtubeaccounts/' + this.state.youtubeaccountId, {\n//       method: \"DELETE\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": \"Bearer \" + this.props.user.jwt\n//       },\n//     })\n//     this.setState({\n//       authorised: false,\n//       youtubeaccountId: undefined\n//      })\n//   }\n//\n//   onFailure = (error) => {\n//     console.log(error);\n//   };\n//\n//   googleResponse = async(response) => {\n//\n//     let channelName = response.profileObj.name;\n//     let profileObj = response.profileObj;\n//     let tokenObj = response.tokenObj;\n//     let user = this.props.user.userID;\n//\n//     // Store retrieved credentials in database\n//     await fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": \"Bearer \" + this.props.user.jwt\n//       },\n//       body: JSON.stringify({\n//         \"channelName\": channelName,\n//         \"profileObj\": profileObj,\n//         \"tokenObj\": tokenObj,\n//         \"user\": user\n//       })\n//     })\n//     this.checkCredentials()\n//   }\n//\n//   render() {\n//     // switch (this.state.authorised) {\n//       // case false:\n//         return(\n//           <div>\n//               <GoogleLogin\n//                   clientId={keys.GOOGLE_CLIENT_ID}\n//                   scope={keys.YOUTUBE_ANALYTICS_SCOPE}\n//                   buttonText=\"Login\"\n//                   responseType=\"id_token\"\n//                   prompt=\"consent\"\n//                   accessType=\"offline\"\n//                   onSuccess={this.googleResponse}\n//                   onFailure={this.onFailure}\n//               />\n//           </div>\n//         )\n//\n//       // default:\n//       //   return(\n//       //     <div>\n//       //     <button onClick={this.logout}>Logout</button>\n//       //     </div>\n//       //   )\n//     // }\n//   }\n// }\n//\n// export default YouTubeAuth;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n// import { GoogleLogin } from 'react-google-login';\n//\n// const keys = require('../../config/keys');\n//\n// class YouTubeAuth extends Component {\n//   constructor(props) {\n//     super(props);\n//\n//     this.state = {\n//       authorised: false,\n//       youtubeaccountId: undefined\n//     }\n//   }\n//\n//   componentDidMount = () => {\n//     this.checkCredentials();\n//   }\n//\n//   checkCredentials = async() => {\n//     // Retrieve credentials from database\n//     const response = await fetch(keys.STRAPI_URI + '/users/me', {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": \"Bearer \" + this.props.user.jwt\n//       },\n//     })\n//     const json = await response.json();\n//     this.isTokenValid(json)\n//     this.setYouTubeAccountId(json)\n//   }\n//\n//   isTokenValid = (response) => {\n//     if (response.youtubeaccount == null) {\n//       this.setState({ authorised: false })\n//     } else {\n//       if (response.youtubeaccount.tokenObj.access_token != null) {\n//         this.setState({ authorised: true })\n//       }\n//       if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n//         this.setState({ authorised: false })\n//         alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n//       }\n//     }\n//   }\n//\n//   setYouTubeAccountId = (response) => {\n//     if (response.youtubeaccount != null) {\n//       this.setState({ youtubeaccountId: response.youtubeaccount._id })\n//     }\n//   }\n//\n//   logout = () => {\n//     // Retrieve credentials from database\n//     fetch(keys.STRAPI_URI + '/youtubeaccounts/' + this.state.youtubeaccountId, {\n//       method: \"DELETE\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": \"Bearer \" + this.props.user.jwt\n//       },\n//     })\n//     this.setState({\n//       authorised: false,\n//       youtubeaccountId: undefined\n//      })\n//   }\n//\n//   onFailure = (error) => {\n//     console.log(error);\n//   };\n//\n//   googleResponse = async(response) => {\n//\n//     let channelName = response.profileObj.name;\n//     let profileObj = response.profileObj;\n//     let tokenObj = response.tokenObj;\n//     let user = this.props.user.userID;\n//\n//     // Store retrieved credentials in database\n//     await fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": \"Bearer \" + this.props.user.jwt\n//       },\n//       body: JSON.stringify({\n//         \"channelName\": channelName,\n//         \"profileObj\": profileObj,\n//         \"tokenObj\": tokenObj,\n//         \"user\": user\n//       })\n//     })\n//     this.checkCredentials()\n//   }\n//\n//   render() {\n//     // switch (this.state.authorised) {\n//       // case false:\n//         return(\n//           <div>\n//               <GoogleLogin\n//                   clientId={keys.GOOGLE_CLIENT_ID}\n//                   scope={keys.YOUTUBE_ANALYTICS_SCOPE}\n//                   buttonText=\"Login\"\n//                   responseType=\"id_token\"\n//                   prompt=\"consent\"\n//                   accessType=\"offline\"\n//                   onSuccess={this.googleResponse}\n//                   onFailure={this.onFailure}\n//               />\n//           </div>\n//         )\n//\n//       // default:\n//       //   return(\n//       //     <div>\n//       //     <button onClick={this.logout}>Logout</button>\n//       //     </div>\n//       //   )\n//     // }\n//   }\n// }\n//\n// export default YouTubeAuth;\n"]},"metadata":{},"sourceType":"module"}