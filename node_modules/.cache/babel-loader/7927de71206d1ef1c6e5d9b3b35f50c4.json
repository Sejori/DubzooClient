{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar keys = require('../../config/keys');\n\nvar Content;\n\nvar YouTubeData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeData, _Component);\n\n  function YouTubeData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, YouTubeData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(YouTubeData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.FetchData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, json, accessToken, channelName, today, dd, mm, yyyy, monthAgo;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(keys.STRAPI_URI + '/users/me', {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Authorization\": \"Bearer \" + _this.props.user.jwt\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              json = _context.sent;\n              console.log(json);\n\n              if (json.youtubeaccount == null) {\n                alert(\"Something went wrong!\");\n              } else {\n                if (response.youtubeaccount.tokenObj.access_token != null) {\n                  accessToken = response.youtubeaccount.tokenObj.access_token;\n                  channelName = response.youtubeaccount.profileObj.name;\n                }\n\n                if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n                  alert(\"Uh-oh. Your access has expired, please sign-in again :)\");\n                }\n              } // getting current date\n\n\n              today = new Date();\n              dd = today.getDate();\n              mm = today.getMonth() + 1;\n              yyyy = today.getFullYear();\n              today = mm + '-' + dd + '-' + yyyy;\n              mm = mm - 1;\n              monthAgo = mm + '-' + dd + '-' + yyyy; // GET YT Analytics API\n\n              axios.get(keys.YOUTUBE_ANALYTICS_URI, {\n                access_token: accessToken,\n                endDate: today,\n                ids: channelName,\n                scope: keys.YOUTUBE_SCOPES,\n                startDate: monthAgo,\n                metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n                dimensions: 'hour',\n                sort: 'day'\n              }).then(function (response) {\n                // Handle success.\n                console.log('Well done!');\n                console.log(response);\n              }).catch(function (error) {\n                // Handle error.\n                console.log('An error occurred:', error);\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    return _this;\n  }\n\n  _createClass(YouTubeData, [{\n    key: \"render\",\n    value: function render() {\n      Content = React.createElement(\"button\", {\n        onClick: this.FetchData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Fetch Data\");\n      return React.createElement(\"div\", {\n        className: \"Data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, Content);\n    }\n  }]);\n\n  return YouTubeData;\n}(Component);\n\nexport default YouTubeData;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js"],"names":["React","Component","axios","keys","require","Content","YouTubeData","FetchData","fetch","STRAPI_URI","method","headers","props","user","jwt","response","json","console","log","youtubeaccount","alert","tokenObj","access_token","accessToken","channelName","profileObj","name","expires_at","Date","getTime","today","dd","getDate","mm","getMonth","yyyy","getFullYear","monthAgo","get","YOUTUBE_ANALYTICS_URI","endDate","ids","scope","YOUTUBE_SCOPES","startDate","metrics","dimensions","sort","then","catch","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst keys = require('../../config/keys');\nvar Content;\n\nclass YouTubeData extends Component {\n\n  FetchData = async() => {\n\n    // get YT credentials from db\n    const response = await fetch(keys.STRAPI_URI + '/users/me', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    const json = await response.json();\n    console.log(json)\n\n    if (json.youtubeaccount == null) {\n      alert(\"Something went wrong!\")\n    } else {\n      if (response.youtubeaccount.tokenObj.access_token != null) {\n        var accessToken = response.youtubeaccount.tokenObj.access_token;\n        var channelName = response.youtubeaccount.profileObj.name;\n      }\n      if (response.youtubeaccount.tokenObj.expires_at < new Date().getTime()) {\n        alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n      }\n    }\n\n    // getting current date\n    var today = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth()+1;\n    let yyyy = today.getFullYear();\n    today = mm+'-'+dd+'-'+yyyy;\n\n    mm = mm - 1;\n    var monthAgo = mm+'-'+dd+'-'+yyyy;\n\n    // GET YT Analytics API\n    axios\n      .get(keys.YOUTUBE_ANALYTICS_URI, {\n        access_token: accessToken,\n        endDate: today,\n        ids: channelName,\n        scope: keys.YOUTUBE_SCOPES,\n        startDate: monthAgo,\n        metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n        dimensions: 'hour',\n        sort: 'day'\n      })\n      .then(response => {\n        // Handle success.\n        console.log('Well done!');\n        console.log(response);\n      })\n      .catch(error => {\n        // Handle error.\n        console.log('An error occurred:', error);\n      });\n\n  }\n\n  render() {\n\n    Content = <button onClick={this.FetchData}>Fetch Data</button>\n\n    return(\n      <div className=\"Data\">\n        {Content}\n      </div>\n    );\n  }\n}\n\nexport default YouTubeData;\n"]},"metadata":{},"sourceType":"module"}