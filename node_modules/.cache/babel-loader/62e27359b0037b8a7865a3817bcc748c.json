{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar keys = require('../../config/keys');\n\nvar YouTubeData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeData, _Component);\n\n  function YouTubeData(props) {\n    var _this;\n\n    _classCallCheck(this, YouTubeData);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(YouTubeData).call(this, props));\n    _this.FetchData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              alert(\"you got here\"); // GET YT Analytics API\n\n              axios.get(keys.YOUTUBE_ANALYTICS_URI, {\n                access_token: _this.props.user.accessToken,\n                callback: '',\n                prettyPrint: true,\n                googleId: _this.props.user.userID,\n                scope: keys.YOUTUBE_SCOPE,\n                ids: _this.state.channelName,\n                startDate: '2017-01-01',\n                endDate: '2017-12-31',\n                metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n                dimensions: 'hour',\n                sort: 'day'\n              }).then(function (response) {\n                // Handle success.\n                console.log('Well done!');\n                console.log(response);\n              }).catch(function (error) {\n                // Handle error.\n                console.log('An error occurred:', error);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.state = {\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(YouTubeData, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.user === undefined) {\n        var Content = \"\";\n      } else {\n        var Content = React.createElement(\"button\", {\n          onClick: this.FetchData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, \"Fetch Data\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"Data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, Content);\n    }\n  }]);\n\n  return YouTubeData;\n}(Component);\n\nexport default YouTubeData;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/data/YouTubeData.js"],"names":["React","Component","axios","keys","require","YouTubeData","props","FetchData","alert","get","YOUTUBE_ANALYTICS_URI","access_token","user","accessToken","callback","prettyPrint","googleId","userID","scope","YOUTUBE_SCOPE","ids","state","channelName","startDate","endDate","metrics","dimensions","sort","then","response","console","log","catch","error","data","undefined","Content"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;IAEMC,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;AADiB,UAOnBC,SAPmB;AAAA;AAAA;AAAA;AAAA,6BAOP;AAAA;AAAA;AAAA;AAAA;AACVC,cAAAA,KAAK,CAAC,cAAD,CAAL,CADU,CAGV;;AACAN,cAAAA,KAAK,CACFO,GADH,CACON,IAAI,CAACO,qBADZ,EACmC;AAC/BC,gBAAAA,YAAY,EAAE,MAAKL,KAAL,CAAWM,IAAX,CAAgBC,WADC;AAE/BC,gBAAAA,QAAQ,EAAE,EAFqB;AAG/BC,gBAAAA,WAAW,EAAE,IAHkB;AAI/BC,gBAAAA,QAAQ,EAAE,MAAKV,KAAL,CAAWM,IAAX,CAAgBK,MAJK;AAK/BC,gBAAAA,KAAK,EAAEf,IAAI,CAACgB,aALmB;AAM/BC,gBAAAA,GAAG,EAAE,MAAKC,KAAL,CAAWC,WANe;AAO/BC,gBAAAA,SAAS,EAAE,YAPoB;AAQ/BC,gBAAAA,OAAO,EAAE,YARsB;AAS/BC,gBAAAA,OAAO,EAAE,uDATsB;AAU/BC,gBAAAA,UAAU,EAAE,MAVmB;AAW/BC,gBAAAA,IAAI,EAAE;AAXyB,eADnC,EAcGC,IAdH,CAcQ,UAAAC,QAAQ,EAAI;AAChB;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,eAlBH,EAmBGG,KAnBH,CAmBS,UAAAC,KAAK,EAAI;AACd;AACAH,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCE,KAAlC;AACD,eAtBH;;AAJU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPO;AAGjB,UAAKZ,KAAL,GAAa;AAAEa,MAAAA,IAAI,EAAE;AAAR,KAAb;AAHiB;AAIlB;;;;6BAiCQ;AAEP,UAAI,KAAK5B,KAAL,CAAWM,IAAX,KAAoBuB,SAAxB,EAAmC;AACjC,YAAIC,OAAO,GAAG,EAAd;AACD,OAFD,MAEO;AACL,YAAIA,OAAO,GAAG;AAAQ,UAAA,OAAO,EAAE,KAAK7B,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAd;AACD;;AAED,aACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG6B,OADH,CADF;AAKD;;;;EAnDuBnC,S;;AAsD1B,eAAeI,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst keys = require('../../config/keys');\n\nclass YouTubeData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { data: [] }\n  }\n\n\n  FetchData = async() => {\n    alert(\"you got here\");\n\n    // GET YT Analytics API\n    axios\n      .get(keys.YOUTUBE_ANALYTICS_URI, {\n        access_token: this.props.user.accessToken,\n        callback: '',\n        prettyPrint: true,\n        googleId: this.props.user.userID,\n        scope: keys.YOUTUBE_SCOPE,\n        ids: this.state.channelName,\n        startDate: '2017-01-01',\n        endDate: '2017-12-31',\n        metrics: 'estimatedMinutesWatched,views,likes,subscribersGained',\n        dimensions: 'hour',\n        sort: 'day'\n      })\n      .then(response => {\n        // Handle success.\n        console.log('Well done!');\n        console.log(response);\n      })\n      .catch(error => {\n        // Handle error.\n        console.log('An error occurred:', error);\n      });\n\n  }\n\n  render() {\n\n    if (this.props.user === undefined) {\n      var Content = \"\";\n    } else {\n      var Content = <button onClick={this.FetchData}>Fetch Data</button>;\n    }\n\n    return(\n      <div className=\"Data\">\n        {Content}\n      </div>\n    );\n  }\n}\n\nexport default YouTubeData;\n"]},"metadata":{},"sourceType":"module"}