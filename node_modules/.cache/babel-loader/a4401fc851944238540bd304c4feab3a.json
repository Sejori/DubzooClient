{"ast":null,"code":"import _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js\";\nimport React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport axios from 'axios';\n\nvar keys = require('../../config/keys');\n\nvar YouTubeAuth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeAuth, _Component);\n\n  function YouTubeAuth(props) {\n    var _this;\n\n    _classCallCheck(this, YouTubeAuth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(YouTubeAuth).call(this, props)); // only userID needed in this component to check whether logged in or not.\n\n    _this.logout = function () {\n      _this.setState({\n        socialUserID: ''\n      });\n    };\n\n    _this.onFailure = function (error) {\n      console.log(error);\n    };\n\n    _this.googleResponse = function (response) {\n      _this.setState({\n        socailUserID: response.googleId\n      }); // pass credentials to UpdateUser function prop from parent component\n\n\n      _this.props.UpdateUser(response.googleId, response.profileObj.name, response.profileObj.email, response.tokenObj.access_token); // PUT Social acount to Strapi user in db\n\n\n      axios.put(\"http://localhost:1337/users/\".concat(_this.props.user.username, \"/\").concat(_this.props.user.jwt), {\n        YouTubeUserID: response.googleId,\n        YouTubeName: response.profileObj.name,\n        YouTubeAccessToken: response.tokenObj.access_token\n      }).then(function (response) {\n        // Handle success.\n        console.log('Well done, your post has been successfully updated: ', response.data);\n      }).catch(function (error) {\n        // Handle error.\n        console.log('An error occurred:', error);\n      });\n    };\n\n    _this.state = {\n      socialUserID: '',\n      loggedIn: false\n    };\n    return _this;\n  }\n\n  _createClass(YouTubeAuth, [{\n    key: \"render\",\n    value: function render() {\n      switch (this.state.socialUserID) {\n        case '':\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, React.createElement(GoogleLogin, {\n            clientId: keys.GOOGLE_CLIENT_ID,\n            scope: keys.YOUTUBE_AUTH_SCOPE,\n            buttonText: \"Login\",\n            responseType: \"id_token\",\n            prompt: \"consent\",\n            accessType: \"offline\",\n            onSuccess: this.googleResponse,\n            onFailure: this.onFailure,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }));\n\n        default:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            onClick: this.logout,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, \"Logout\"));\n      }\n    }\n  }]);\n\n  return YouTubeAuth;\n}(Component);\n\nexport default YouTubeAuth;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js"],"names":["React","Component","GoogleLogin","axios","keys","require","YouTubeAuth","props","logout","setState","socialUserID","onFailure","error","console","log","googleResponse","response","socailUserID","googleId","UpdateUser","profileObj","name","email","tokenObj","access_token","put","user","username","jwt","YouTubeUserID","YouTubeName","YouTubeAccessToken","then","data","catch","state","loggedIn","GOOGLE_CLIENT_ID","YOUTUBE_AUTH_SCOPE"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;IAEMC,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN,GADe,CAGf;;AAHe,UAUnBC,MAVmB,GAUV,YAAM;AACX,YAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACH,KAZkB;;AAAA,UAcnBC,SAdmB,GAcP,UAACC,KAAD,EAAW;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAhBkB;;AAAA,UAkBnBG,cAlBmB,GAkBF,UAACC,QAAD,EAAc;AAE7B,YAAKP,QAAL,CAAc;AAAEQ,QAAAA,YAAY,EAAED,QAAQ,CAACE;AAAzB,OAAd,EAF6B,CAI7B;;;AACA,YAAKX,KAAL,CAAWY,UAAX,CACEH,QAAQ,CAACE,QADX,EAEEF,QAAQ,CAACI,UAAT,CAAoBC,IAFtB,EAGEL,QAAQ,CAACI,UAAT,CAAoBE,KAHtB,EAIEN,QAAQ,CAACO,QAAT,CAAkBC,YAJpB,EAL6B,CAY7B;;;AACArB,MAAAA,KAAK,CACFsB,GADH,uCACsC,MAAKlB,KAAL,CAAWmB,IAAX,CAAgBC,QADtD,cACkE,MAAKpB,KAAL,CAAWmB,IAAX,CAAgBE,GADlF,GACyF;AACrFC,QAAAA,aAAa,EAAEb,QAAQ,CAACE,QAD6D;AAErFY,QAAAA,WAAW,EAAEd,QAAQ,CAACI,UAAT,CAAoBC,IAFoD;AAGrFU,QAAAA,kBAAkB,EAAEf,QAAQ,CAACO,QAAT,CAAkBC;AAH+C,OADzF,EAMGQ,IANH,CAMQ,UAAAhB,QAAQ,EAAI;AAChB;AACAH,QAAAA,OAAO,CAACC,GAAR,CACE,sDADF,EAEEE,QAAQ,CAACiB,IAFX;AAID,OAZH,EAaGC,KAbH,CAaS,UAAAtB,KAAK,EAAI;AACd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,KAAlC;AACD,OAhBH;AAkBD,KAjDkB;;AAIf,UAAKuB,KAAL,GAAa;AACXzB,MAAAA,YAAY,EAAE,EADH;AAEX0B,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAJe;AAQlB;;;;6BA2CQ;AACP,cAAQ,KAAKD,KAAL,CAAWzB,YAAnB;AACE,aAAK,EAAL;AACE,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,WAAD;AACI,YAAA,QAAQ,EAAEN,IAAI,CAACiC,gBADnB;AAEI,YAAA,KAAK,EAAEjC,IAAI,CAACkC,kBAFhB;AAGI,YAAA,UAAU,EAAC,OAHf;AAII,YAAA,YAAY,EAAC,UAJjB;AAKI,YAAA,MAAM,EAAC,SALX;AAMI,YAAA,UAAU,EAAC,SANf;AAOI,YAAA,SAAS,EAAE,KAAKvB,cAPpB;AAQI,YAAA,SAAS,EAAE,KAAKJ,SARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADF;;AAeF;AACE,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACA;AAAQ,YAAA,OAAO,EAAE,KAAKH,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,CADF;AAlBJ;AAwBD;;;;EA7EuBP,S;;AAgF1B,eAAeK,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport axios from 'axios';\n\nconst keys = require('../../config/keys');\n\nclass YouTubeAuth extends Component {\n  constructor(props) {\n      super(props);\n\n      // only userID needed in this component to check whether logged in or not.\n      this.state = {\n        socialUserID: '',\n        loggedIn: false\n      };\n  }\n\n  logout = () => {\n      this.setState({ socialUserID: '' })\n  };\n\n  onFailure = (error) => {\n    console.log(error);\n  };\n\n  googleResponse = (response) => {\n\n    this.setState({ socailUserID: response.googleId })\n\n    // pass credentials to UpdateUser function prop from parent component\n    this.props.UpdateUser(\n      response.googleId,\n      response.profileObj.name,\n      response.profileObj.email,\n      response.tokenObj.access_token\n    );\n\n    // PUT Social acount to Strapi user in db\n    axios\n      .put(`http://localhost:1337/users/${this.props.user.username}/${this.props.user.jwt}`, {\n        YouTubeUserID: response.googleId,\n        YouTubeName: response.profileObj.name,\n        YouTubeAccessToken: response.tokenObj.access_token\n      })\n      .then(response => {\n        // Handle success.\n        console.log(\n          'Well done, your post has been successfully updated: ',\n          response.data\n        );\n      })\n      .catch(error => {\n        // Handle error.\n        console.log('An error occurred:', error);\n      });\n\n  }\n\n  render() {\n    switch (this.state.socialUserID) {\n      case '':\n        return(\n          <div>\n              <GoogleLogin\n                  clientId={keys.GOOGLE_CLIENT_ID}\n                  scope={keys.YOUTUBE_AUTH_SCOPE}\n                  buttonText=\"Login\"\n                  responseType=\"id_token\"\n                  prompt=\"consent\"\n                  accessType=\"offline\"\n                  onSuccess={this.googleResponse}\n                  onFailure={this.onFailure}\n              />\n          </div>\n        )\n\n      default:\n        return(\n          <div>\n          <button onClick={this.logout}>Logout</button>\n          </div>\n        )\n    }\n  }\n}\n\nexport default YouTubeAuth;\n"]},"metadata":{},"sourceType":"module"}