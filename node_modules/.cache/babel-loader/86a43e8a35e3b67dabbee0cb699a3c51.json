{"ast":null,"code":"import _classCallCheck from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebringrose/Projects/Dubzoo/app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js\";\nimport React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nvar keys = require('../../config/keys');\n\nvar YouTubeAuth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YouTubeAuth, _Component);\n\n  function YouTubeAuth(props) {\n    var _this;\n\n    _classCallCheck(this, YouTubeAuth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(YouTubeAuth).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.CheckCredentials();\n    };\n\n    _this.CheckCredentials = function () {\n      // Retrieve credentials from database\n      fetch(keys.STRAPI_URI + '/users/me', {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + _this.props.user.jwt\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (respone) {\n        return _this.setState({\n          youtubeaccountId: response.youtubeaccount.id\n        });\n      }).then(function (response) {\n        return _this.IsTokenValid(response);\n      });\n    };\n\n    _this.IsTokenValid = function (response) {\n      if (response.youtubeaccounts[0] === undefined) {\n        _this.setState({\n          authorised: false\n        });\n      } else {\n        if (response.youtubeaccounts[0].tokenObj.access_token !== undefined) {\n          _this.setState({\n            authorised: true\n          });\n        }\n\n        if (response.youtubeaccounts[0].tokenObj.expires_at < new Date().getTime()) {\n          _this.setState({\n            authorised: false\n          });\n\n          alert(\"Uh-oh. Your access has expired, please sign-in again :)\");\n        }\n      }\n    };\n\n    _this.Logout = function () {};\n\n    _this.onFailure = function (error) {\n      console.log(error);\n    };\n\n    _this.googleResponse = function (response) {\n      var channelName = response.profileObj.name;\n      var profileObj = response.profileObj;\n      var tokenObj = response.tokenObj;\n      var user = _this.props.user.userID; // Store retrieved credentials in database\n\n      fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + _this.props.user.jwt\n        },\n        body: JSON.stringify({\n          \"channelName\": channelName,\n          \"profileObj\": profileObj,\n          \"tokenObj\": tokenObj,\n          \"user\": user\n        })\n      }); // call check credentials fcn\n\n      _this.CheckCredentials();\n    };\n\n    _this.state = {\n      authorised: false,\n      youtubeaccountId: undefined\n    };\n    return _this;\n  }\n\n  _createClass(YouTubeAuth, [{\n    key: \"render\",\n    value: function render() {\n      switch (this.state.authorised) {\n        case false:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, React.createElement(GoogleLogin, {\n            clientId: keys.GOOGLE_CLIENT_ID,\n            scope: keys.YOUTUBE_AUTH_SCOPE,\n            buttonText: \"Login\",\n            responseType: \"id_token\",\n            prompt: \"consent\",\n            accessType: \"offline\",\n            onSuccess: this.googleResponse,\n            onFailure: this.onFailure,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }));\n\n        default:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            onClick: this.logout,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }, \"Logout\"));\n      }\n    }\n  }]);\n\n  return YouTubeAuth;\n}(Component);\n\nexport default YouTubeAuth;","map":{"version":3,"sources":["/Users/sebringrose/Projects/Dubzoo/app/client/src/components/auth/YouTubeAuth.js"],"names":["React","Component","GoogleLogin","keys","require","YouTubeAuth","props","componentDidMount","CheckCredentials","fetch","STRAPI_URI","method","headers","user","jwt","then","response","json","respone","setState","youtubeaccountId","youtubeaccount","id","IsTokenValid","youtubeaccounts","undefined","authorised","tokenObj","access_token","expires_at","Date","getTime","alert","Logout","onFailure","error","console","log","googleResponse","channelName","profileObj","name","userID","body","JSON","stringify","state","GOOGLE_CLIENT_ID","YOUTUBE_AUTH_SCOPE","logout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;IAEMC,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;;AADiB,UASnBC,iBATmB,GASC,YAAM;AACxB,YAAKC,gBAAL;AACD,KAXkB;;AAAA,UAanBA,gBAbmB,GAaA,YAAM;AACvB;AACAC,MAAAA,KAAK,CAACN,IAAI,CAACO,UAAL,GAAkB,WAAnB,EAAgC;AACnCC,QAAAA,MAAM,EAAE,KAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,2BAAiB,YAAY,MAAKN,KAAL,CAAWO,IAAX,CAAgBC;AAFtC;AAF0B,OAAhC,CAAL,CAOCC,IAPD,CAOM,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAPd,EAQCF,IARD,CAQM,UAAAG,OAAO;AAAA,eAAI,MAAKC,QAAL,CAAc;AAAEC,UAAAA,gBAAgB,EAAEJ,QAAQ,CAACK,cAAT,CAAwBC;AAA5C,SAAd,CAAJ;AAAA,OARb,EASCP,IATD,CASM,UAAAC,QAAQ;AAAA,eAAI,MAAKO,YAAL,CAAkBP,QAAlB,CAAJ;AAAA,OATd;AAUD,KAzBkB;;AAAA,UA2BnBO,YA3BmB,GA2BJ,UAACP,QAAD,EAAc;AAC3B,UAAIA,QAAQ,CAACQ,eAAT,CAAyB,CAAzB,MAAgCC,SAApC,EAA+C;AAC7C,cAAKN,QAAL,CAAc;AAAEO,UAAAA,UAAU,EAAE;AAAd,SAAd;AACD,OAFD,MAEO;AACL,YAAIV,QAAQ,CAACQ,eAAT,CAAyB,CAAzB,EAA4BG,QAA5B,CAAqCC,YAArC,KAAsDH,SAA1D,EAAqE;AACnE,gBAAKN,QAAL,CAAc;AAAEO,YAAAA,UAAU,EAAE;AAAd,WAAd;AACD;;AACD,YAAIV,QAAQ,CAACQ,eAAT,CAAyB,CAAzB,EAA4BG,QAA5B,CAAqCE,UAArC,GAAkD,IAAIC,IAAJ,GAAWC,OAAX,EAAtD,EAA4E;AAC1E,gBAAKZ,QAAL,CAAc;AAAEO,YAAAA,UAAU,EAAE;AAAd,WAAd;;AACAM,UAAAA,KAAK,CAAC,yDAAD,CAAL;AACD;AACF;AACF,KAvCkB;;AAAA,UAyCnBC,MAzCmB,GAyCV,YAAM,CAGd,CA5CkB;;AAAA,UA8CnBC,SA9CmB,GA8CP,UAACC,KAAD,EAAW;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAhDkB;;AAAA,UAkDnBG,cAlDmB,GAkDF,UAACtB,QAAD,EAAc;AAE7B,UAAIuB,WAAW,GAAGvB,QAAQ,CAACwB,UAAT,CAAoBC,IAAtC;AACA,UAAID,UAAU,GAAGxB,QAAQ,CAACwB,UAA1B;AACA,UAAIb,QAAQ,GAAGX,QAAQ,CAACW,QAAxB;AACA,UAAId,IAAI,GAAG,MAAKP,KAAL,CAAWO,IAAX,CAAgB6B,MAA3B,CAL6B,CAO7B;;AACAjC,MAAAA,KAAK,CAACN,IAAI,CAACO,UAAL,GAAkB,kBAAnB,EAAuC;AAC1CC,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,2BAAiB,YAAY,MAAKN,KAAL,CAAWO,IAAX,CAAgBC;AAFtC,SAFiC;AAM1C6B,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,yBAAeN,WADI;AAEnB,wBAAcC,UAFK;AAGnB,sBAAYb,QAHO;AAInB,kBAAQd;AAJW,SAAf;AANoC,OAAvC,CAAL,CAR6B,CAsB7B;;AACA,YAAKL,gBAAL;AACD,KA1EkB;;AAGjB,UAAKsC,KAAL,GAAa;AACXpB,MAAAA,UAAU,EAAE,KADD;AAEXN,MAAAA,gBAAgB,EAAEK;AAFP,KAAb;AAHiB;AAOlB;;;;6BAqEQ;AACP,cAAQ,KAAKqB,KAAL,CAAWpB,UAAnB;AACE,aAAK,KAAL;AACE,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,WAAD;AACI,YAAA,QAAQ,EAAEvB,IAAI,CAAC4C,gBADnB;AAEI,YAAA,KAAK,EAAE5C,IAAI,CAAC6C,kBAFhB;AAGI,YAAA,UAAU,EAAC,OAHf;AAII,YAAA,YAAY,EAAC,UAJjB;AAKI,YAAA,MAAM,EAAC,SALX;AAMI,YAAA,UAAU,EAAC,SANf;AAOI,YAAA,SAAS,EAAE,KAAKV,cAPpB;AAQI,YAAA,SAAS,EAAE,KAAKJ,SARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADF;;AAeF;AACE,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACA;AAAQ,YAAA,OAAO,EAAE,KAAKe,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,CADF;AAlBJ;AAwBD;;;;EAtGuBhD,S;;AAyG1B,eAAeI,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nconst keys = require('../../config/keys');\n\nclass YouTubeAuth extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      authorised: false,\n      youtubeaccountId: undefined\n    }\n  }\n\n  componentDidMount = () => {\n    this.CheckCredentials();\n  }\n\n  CheckCredentials = () => {\n    // Retrieve credentials from database\n    fetch(keys.STRAPI_URI + '/users/me', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n    })\n    .then(response => response.json())\n    .then(respone => this.setState({ youtubeaccountId: response.youtubeaccount.id }))\n    .then(response => this.IsTokenValid(response))\n  }\n\n  IsTokenValid = (response) => {\n    if (response.youtubeaccounts[0] === undefined) {\n      this.setState({ authorised: false })\n    } else {\n      if (response.youtubeaccounts[0].tokenObj.access_token !== undefined) {\n        this.setState({ authorised: true })\n      }\n      if (response.youtubeaccounts[0].tokenObj.expires_at < new Date().getTime()) {\n        this.setState({ authorised: false })\n        alert(\"Uh-oh. Your access has expired, please sign-in again :)\")\n      }\n    }\n  }\n\n  Logout = () => {\n\n\n  }\n\n  onFailure = (error) => {\n    console.log(error);\n  };\n\n  googleResponse = (response) => {\n\n    let channelName = response.profileObj.name;\n    let profileObj = response.profileObj;\n    let tokenObj = response.tokenObj;\n    let user = this.props.user.userID;\n\n    // Store retrieved credentials in database\n    fetch(keys.STRAPI_URI + '/youtubeaccounts', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.user.jwt\n      },\n      body: JSON.stringify({\n        \"channelName\": channelName,\n        \"profileObj\": profileObj,\n        \"tokenObj\": tokenObj,\n        \"user\": user\n      })\n    })\n\n    // call check credentials fcn\n    this.CheckCredentials();\n  }\n\n  render() {\n    switch (this.state.authorised) {\n      case false:\n        return(\n          <div>\n              <GoogleLogin\n                  clientId={keys.GOOGLE_CLIENT_ID}\n                  scope={keys.YOUTUBE_AUTH_SCOPE}\n                  buttonText=\"Login\"\n                  responseType=\"id_token\"\n                  prompt=\"consent\"\n                  accessType=\"offline\"\n                  onSuccess={this.googleResponse}\n                  onFailure={this.onFailure}\n              />\n          </div>\n        )\n\n      default:\n        return(\n          <div>\n          <button onClick={this.logout}>Logout</button>\n          </div>\n        )\n    }\n  }\n}\n\nexport default YouTubeAuth;\n"]},"metadata":{},"sourceType":"module"}